{
  "beginner": [
      {
        "title": "Variable Scope Question 1",
        "description": "Where is a local variable declared inside a method accessible?",
        "code": "public void myMethod() {\n   int x = 5;\n   System.out.println(x);\n}",
        "options": ["Anywhere in the class", "Only inside the method", "Anywhere in the package", "Globally"],
        "correct": 1,
        "explanation": "Option B is correct. Local variables can only be accessed within the method they are declared."
      },
      {
        "title": "Type Casting Question 1",
        "description": "What will the following code print?",
        "code": "int x = (int) 9.7;\nSystem.out.println(x);",
        "options": ["9.7", "10", "9", "Error"],
        "correct": 2,
        "explanation": "Option C is correct. Casting double 9.7 to int removes the decimal part, leaving 9."
      },
      {
        "title": "Increment Operator Question 1",
        "description": "What is the output of this code?",
        "code": "int a = 5;\nSystem.out.println(++a);",
        "options": ["5", "6", "7", "Error"],
        "correct": 1,
        "explanation": "Option B is correct. '++a' is a pre-increment operator, so a becomes 6 before printing."
      },
      {
        "title": "String Method Question 1",
        "description": "Which String method returns the number of characters?",
        "code": "String text = \"Hello\";\nint length = text.length();",
        "options": ["size()", "length()", "getSize()", "count()"],
        "correct": 1,
        "explanation": "Option B is correct. The length() method returns the number of characters in a String."
      },
      {
        "title": "Array Index Question 1",
        "description": "What is the first index of an array in Java?",
        "code": "int[] nums = {10, 20, 30};",
        "options": ["0", "1", "Depends on JVM", "-1"],
        "correct": 0,
        "explanation": "Option A is correct. In Java, arrays are zero-indexed."
      },
      {
        "title": "Switch Statement Question 1",
        "description": "What will this code print?",
        "code": "int day = 3;\nswitch(day) {\n   case 1: System.out.println(\"Mon\"); break;\n   case 2: System.out.println(\"Tue\"); break;\n   case 3: System.out.println(\"Wed\"); break;\n   default: System.out.println(\"Other\");\n}",
        "options": ["Mon", "Tue", "Wed", "Other"],
        "correct": 2,
        "explanation": "Option C is correct. Since day = 3, 'Wed' will be printed."
      },
      {
        "title": "While Loop Question 1",
        "description": "How many times will the loop run?",
        "code": "int i = 1;\nwhile(i <= 3) {\n   System.out.println(i);\n   i++;\n}",
        "options": ["2", "3", "4", "Infinite"],
        "correct": 1,
        "explanation": "Option B is correct. The loop runs while i=1,2,3 â†’ 3 times."
      },
      {
        "title": "Constructor Question 1",
        "description": "What is a constructor in Java?",
        "code": "class Car {\n   Car() {\n      System.out.println(\"Car created\");\n   }\n}",
        "options": ["A method to destroy objects", "A special method to initialize objects", "A keyword", "An access modifier"],
        "correct": 1,
        "explanation": "Option B is correct. A constructor initializes an object when it is created."
      },
      {
        "title": "Access Modifier Question 1",
        "description": "Which access modifier makes a variable visible only within the same class?",
        "code": "class Test {\n   private int number = 5;\n}",
        "options": ["public", "protected", "default", "private"],
        "correct": 3,
        "explanation": "Option D is correct. 'private' restricts access to only within the same class."
      },
      {
        "title": "Inheritance Question 1",
        "description": "Which keyword is used for inheritance in Java?",
        "code": "class Dog extends Animal {}",
        "options": ["inherits", "extends", "implements", "super"],
        "correct": 1,
        "explanation": "Option B is correct. The 'extends' keyword is used for class inheritance."
      }
  ],
  "intermediate": [
  ],
  "advanced": [
  ]
}